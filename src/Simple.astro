---
import { Logo } from "./components/Logo.astro";
import { ThemeToggle, LanguageSwitcher, Translate } from "astro-localization";
import { Image } from "astro-image";

interface NavItem {
	title: string;
	href: string;
}

interface Props {
	navItems: NavItem[];
	pathname: string;
	sticky: boolean;
	hideOnScroll: boolean;
	logo: string;
}

const { navItems, pathname, logo, sticky = true, hideOnScroll = true } = Astro.props as props;
---

<header id="header" class={`${sticky && "sticky"} ${hideOnScroll && "scroll-hide"} header`}>
	<div class="navbar-container">
		<nav class="navbar flex container">
			<a class="logo-link" href="/">
				<Image class="header-logo" src={logo} />
			</a>

			<button id="navbar-toggle" class="navbar-toggle icon" type="button" aria-haspopup="true" aria-expanded="false" aria-label="Toggle navigation">
				<div class="hamburger" aria-hidden="true">
					<div class="hamburger-item"></div>
					<div class="hamburger-item"></div>
					<div class="hamburger-item"></div>
				</div>
			</button>

			<ul id="navbar-menu" class="navbar-menu menu" role="menu">
				{navItems.map(({ title, href, type, items }) => (
					<li class="menu-item" role="none">
						<a {href} aria-current={pathname === href} class="menu-link" role="menuitem"><Translate key={title} /></a>
					</li>
				))}
				<li class="menu-item" role="none">
					<ThemeToggle />
				</li>
				<li class="menu-item" role="none">
					<LanguageSwitcher />
				</li>
			</ul>
		</nav>

		<div id="header-overlay" class="header-overlay"></div>
	</div>
</header>

<script>
	// Get Header
	const header = document.getElementById("header");

	// Get menu list
	const navbarMenu = document.getElementById("navbar-menu");

	// Get overLay layer
	const overlay = document.getElementById("header-overlay");

	// Get toggle menu button
	const toggleMenuButton = document.getElementById("navbar-toggle");

	// Function definitions
	let preventMneuLinksFronFoucs;

	// Handle (resize) events
	window.addEventListener("resize", () => {
		// Call functions
		preventMneuLinksFronFoucs();
	});

	// Handle (click) events
	toggleMenuButton.addEventListener("click", function () {
		// Check, if the (aria-expanded) value is (false)
		if (toggleMenuButton.getAttribute("aria-expanded") == "false") {
			// Call function
			openMneu();
		} else {
			// Else
			// Call function
			closeMenu();
		}
	});

	overlay.addEventListener("click", closeMenu);

	// When scroll change, add class on (header) (the scroll effect of header)
	window.addEventListener("scroll", function (e) {
		if (this.scrollY > header.offsetHeight) {
			header.classList.add("header-active");
		} else {
			header.classList.remove("header-active");
		}
	});

	// Open mneu function
	function openMneu() {
		toggleMenuButton.setAttribute("aria-expanded", "true");
		header.classList.add("open");

		navbarMenu.querySelectorAll("a").forEach((link) => {
			link.setAttribute("tabindex", "0");
		});

		// Listen for (keydown)
		document.addEventListener("keydown", handleKeyDown);

		// Handle key down function
		function handleKeyDown(e) {
			if (e.code == "Tab") {
				// Call function
				menuFocusSystem();
				// Remove the (event listener)
				document.removeEventListener("keydown", handleKeyDown);
			}
		}
	}

	// Close mneu function
	function closeMenu() {
		toggleMenuButton.setAttribute("aria-expanded", "false");
		header.classList.remove("open");

		navbarMenu.querySelectorAll("a").forEach((link) => {
			link.setAttribute("tabindex", "-1");
		});
	}

	// Menu focus system function (to control the focus, of the menu when open)
	function menuFocusSystem() {
		// Get first and last child of (navbarMenu)
		const firstChild = navbarMenu.querySelectorAll("a")[0];
		const lastChild = navbarMenu.querySelectorAll("a")[navbarMenu.childElementCount - 1];

		// Focus the first item of the menu List
		setTimeout(() => {
			navbarMenu.querySelectorAll("a")[0].focus();
		}, 100);

		// Keep focus inside menu
		navbarMenu.addEventListener("focusin", function (e) {
			if (e.target == lastChild) {
				e.target.addEventListener("focusout", function () {
					toggleMenuButton.focus();
				});
			}
		});
	}

	// Prevent menu links from focus function
	(preventMneuLinksFronFoucs = function () {
		if (window.innerWidth < 640) {
			navbarMenu.querySelectorAll("a").forEach((link) => {
				link.setAttribute("tabindex", "-1");
			});
		} else {
			navbarMenu.querySelectorAll("a").forEach((link) => {
				link.setAttribute("tabindex", "0");
			});
		}
	})();

	/* Hide header on scroll down functionality */
	var lastKnownScrollY = 0;
	var currentScrollY = 0;
	var ticking = false;
	var idOfHeader = "header";
	var eleHeader = null;
	const classes = {
		pinned: "header-pin",
		unpinned: "header-unpin"
	};

	function onScroll() {
		currentScrollY = window.pageYOffset;
		requestTick();
	}
	function requestTick() {
		if (!ticking) {
			requestAnimationFrame(update);
		}
		ticking = true;
	}
	function update() {
		if (currentScrollY < lastKnownScrollY) {
			pin();
		} else if (currentScrollY > lastKnownScrollY) {
			unpin();
		}
		lastKnownScrollY = currentScrollY;
		ticking = false;
	}
	function pin() {
		if (eleHeader.classList.contains(classes.unpinned)) {
			eleHeader.classList.remove(classes.unpinned);
			eleHeader.classList.add(classes.pinned);
		}
	}
	function unpin() {
		if (eleHeader.classList.contains(classes.pinned) || !eleHeader.classList.contains(classes.unpinned)) {
			eleHeader.classList.remove(classes.pinned);
			eleHeader.classList.add(classes.unpinned);
		}
	}
	eleHeader = document.getElementById(idOfHeader);
	document.addEventListener("scroll", onScroll, false);
	/* End hide header on scroll down functionality */
</script>

<style lang="scss">
	/* Header */
	a {
		text-decoration: none;

		&.logo-link {
			display: contents;
		}
	}

	header.header {
		position: absolute;
		z-index: 100;
		width: 100%;
		height: var(--header-height);
		transition: all 300ms ease-in-out;

		&.open {
			background-color: var(--color-bg-alt);

			.navbar-toggle {
				/* Hamburger animation */
				.hamburger-item:first-child {
					width: 70%;
				}
				.hamburger-item:nth-child(2) {
					width: 90%;
				}
				.hamburger-item:last-child {
					width: 55%;
				}
			}
		}

		&:not(.open) .scroll-hide.header-unpin {
			transform: translateY(calc(-1 * var(--header-height)));
		}

		&.sticky {
			position: fixed;

			&.header-active {
				background-color: var(--color-bg-alt);
				height: var(--header-scrolled-height);
			}
		}

		.navbar-container {
			width: 100%;
			height: 100%;
			background-color: inherit;

			/* Navbar */
			.navbar {
				position: relative;
				height: 100%;
				justify-content: space-between;
				align-items: center;
				background-color: inherit;

				/* Toggle menu button */
				.navbar-toggle {
					background-color: transparent;
					cursor: pointer;
					padding: 0;
				}
			}
		}

		.header-logo {
			height: 100%;
			max-width: 50px;
			padding: 0.5rem 0;
		}

		.hamburger {
			position: relative;
			width: 2.2rem;
			padding: 0.1rem;

			.hamburger-item {
				width: 100%;
				height: 0.25rem;
				background-color: var(--color-text-primary);
				border-radius: 1rem;
				transition: width 500ms ease-in-out;

				&:not(:last-child) {
					margin-bottom: 0.31rem;
				}
			}
		}

		/* Overlay */
		.header-overlay {
			position: fixed;
			inset: 0;
			z-index: -10000;
			background-color: var(--color-text-primary);
			visibility: hidden;
			opacity: 0;
			transition: all 500ms ease-in-out;
		}
	}

	@media screen and (min-width: 40em) {
		header.header {
			background-color: transparent;
		}
	}

	@media screen and (min-width: 60em) {
		.navbar-toggle {
			display: none;
		}
	}

	/* Menu */
	@media screen and (max-width: 60em) {
		.navbar-menu {
			position: fixed;
			top: -100%;
			left: 0;
			z-index: -1;
			width: 100%;
			background-color: var(--color-bg-alt);
			text-align: center;
			padding: 2rem 0;
			visibility: hidden;
			transition: all 500ms ease-in-out;
		}

		header.header.open .navbar-menu {
			visibility: visible;
			top: var(--header-scrolled-height);
			margin: 0;
		}
	}

	.menu-item:not(:last-child) {
		margin-bottom: 1.5rem;
	}

	@media screen and (min-width: 60em) {
		.menu-item {
			display: inline-block;
			vertical-align: middle;
		}

		.menu-item:not(:last-child) {
			margin: 0 0.6rem;
		}
	}

	a.menu-link {
		position: relative;
		font-weight: var(--weight-medium);
		color: var(--color-text-primary);
		padding: 0 0.3rem;
		transition: opacity 300ms ease-in-out;

		&:not(.cta)::before {
			content: "";
			position: absolute;
			left: 0;
			bottom: -0.4rem;
			width: 0;
			height: 0.25rem;
			border-radius: 1rem;
			background-color: var(--color-primary);
			transition: width 300ms ease-in-out;
		}

		&:hover {
			opacity: 0.8;

			&::before {
				width: 100%;
			}
		}

		/* Active link */
		&.active {
			font-weight: var(--weight-bolder);

			&::before {
				width: 100%;
			}
		}

		&[aria-current] {
			font-weight: var(--weight-bolder);

			&::before {
				width: 100%;
			}
		}
	}

	@media screen and (max-width: 60em) {
		header.header.open .header-overlay {
			visibility: visible;
			opacity: 0.8;
		}
	}
</style>
