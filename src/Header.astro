---
import { LanguageSwitcher, Translate } from "astro-localization";
import { Image } from "astro-image";
import { ThemeToggle } from "astro-theme";

interface NavItem {
	title: string;
	href: string;
}

interface Props {
	navItems: NavItem[];
	pathname: string;
	sticky: boolean;
	blur: boolean;
	hideOnScroll: boolean;
	logo: string;
	showThemeToggle: boolean;
	showLanguageSwitcher: boolean;
	lmap: Object;
}

const {
	navItems,
	pathname,
	logo,
	lmap = {},
	showThemeToggle = true,
	showLanguageSwitcher = true,
	sticky = true,
	blur = true,
	hideOnScroll = true
} = Astro.props as Props;

const navItemsLength = navItems.length;
---

<header id="header" class={`${sticky ? "sticky" : ""} ${blur ? "blur" : ""} ${hideOnScroll ? "scroll-hide" : ""} header`}>
	<div class="navbar-container">
		<nav class="navbar container">
			<a class="logo-link" href="/">
				{logo ? <Image class="header-logo" src={logo} /> : <h1>LOGO</h1>}
			</a>

			<button id="navbar-toggle" class="navbar-toggle" type="button" aria-haspopup="true" aria-expanded="false" aria-label="Toggle navigation">
				<div class="hamburger" aria-hidden="true">
					<div class="hamburger-item"></div>
					<div class="hamburger-item"></div>
					<div class="hamburger-item"></div>
				</div>
			</button>

			<ul id="navbar-menu" class="navbar-menu" role="menu">
				{navItems.map(({ title, href, type, items }) => (
					<li class="menu-item" role="menuitem">
						<a {href} aria-current={pathname === href} class="menu-link">
							<Translate {lmap} key={title} />
						</a>
					</li>
				))}
				{showThemeToggle && (
					<li class="menu-item" role="menuitem">
						<ThemeToggle />
					</li>
				)}
				{showLanguageSwitcher && (
					<li class="menu-item" role="menuitem">
						<LanguageSwitcher />
					</li>
				)}
			</ul>
		</nav>

		<div id="header-overlay" class="header-overlay"></div>
	</div>
	<script>
		const header = document.getElementById("header");
		const navbarMenu = document.getElementById("navbar-menu");
		const overlay = document.getElementById("header-overlay");
		const toggleMenuButton = document.getElementById("navbar-toggle");

		let preventMneuLinksFronFoucs;
		var lastKnownScrollY = 0;
		var currentScrollY = 0;
		var ticking = false;
		var idOfHeader = "header";
		var eleHeader = null;
		const classes = {
			pinned: "header-pin",
			unpinned: "header-unpin"
		};

		function onScroll() {
			currentScrollY = window.pageYOffset;
			requestTick();
		}
		function requestTick() {
			if (!ticking) {
				requestAnimationFrame(update);
			}
			ticking = true;
		}
		function update() {
			if (currentScrollY < lastKnownScrollY) {
				pin();
			} else if (currentScrollY > lastKnownScrollY) {
				unpin();
			}
			lastKnownScrollY = currentScrollY;
			ticking = false;
		}
		function pin() {
			if (eleHeader.classList.contains(classes.unpinned)) {
				eleHeader.classList.remove(classes.unpinned);
				eleHeader.classList.add(classes.pinned);
			}
		}
		function unpin() {
			if (eleHeader.classList.contains(classes.pinned) || !eleHeader.classList.contains(classes.unpinned)) {
				eleHeader.classList.remove(classes.pinned);
				eleHeader.classList.add(classes.unpinned);
			}
		}
		function openMneu() {
			toggleMenuButton.setAttribute("aria-expanded", "true");
			header.classList.add("open");

			navbarMenu.querySelectorAll("a").forEach((link) => {
				link.setAttribute("tabindex", "0");
			});

			document.addEventListener("keydown", handleKeyDown);

			function handleKeyDown(e) {
				if (e.code == "Tab") {
					menuFocusSystem();
					document.removeEventListener("keydown", handleKeyDown);
				}
			}
		}

		function closeMenu() {
			toggleMenuButton.setAttribute("aria-expanded", "false");
			header.classList.remove("open");

			navbarMenu.querySelectorAll("a").forEach((link) => {
				link.setAttribute("tabindex", "-1");
			});
		}

		function menuFocusSystem() {
			const firstChild = navbarMenu.querySelectorAll("a")[0];
			const lastChild = navbarMenu.querySelectorAll("a")[navbarMenu.childElementCount - 1];

			setTimeout(() => {
				navbarMenu.querySelectorAll("a")[0].focus();
			}, 100);

			navbarMenu.addEventListener("focusin", function (e) {
				if (e.target == lastChild) {
					e.target.addEventListener("focusout", function () {
						toggleMenuButton.focus();
					});
				}
			});
		}

		window.addEventListener("resize", () => {
			preventMneuLinksFronFoucs();
		});

		toggleMenuButton.addEventListener("click", function () {
			if (toggleMenuButton.getAttribute("aria-expanded") == "false") {
				openMneu();
			} else {
				closeMenu();
			}
		});

		overlay.addEventListener("click", closeMenu);

		window.addEventListener("scroll", function (e) {
			if (this.scrollY > header.offsetHeight) {
				header.classList.add("header-active");
			} else {
				header.classList.remove("header-active");
			}
		});

		(preventMneuLinksFronFoucs = function () {
			if (window.innerWidth < 640) {
				navbarMenu.querySelectorAll("a").forEach((link) => {
					link.setAttribute("tabindex", "-1");
				});
			} else {
				navbarMenu.querySelectorAll("a").forEach((link) => {
					link.setAttribute("tabindex", "0");
				});
			}
		})();

		eleHeader = document.getElementById(idOfHeader);
		document.addEventListener("scroll", onScroll, false);
	</script>
</header>

<style lang="scss">
	/* Header */

	header.header {
		position: absolute;
		z-index: 100;
		width: 100%;
		height: var(--header-height, 6rem);
		transition: all 300ms ease-in-out;

		&.open {
			background-color: var(--color-bg-alt, white);

			.navbar-toggle {
				/* Hamburger animation */
				.hamburger-item:first-child {
					width: 70%;
				}
				.hamburger-item:nth-child(2) {
					width: 90%;
				}
				.hamburger-item:last-child {
					width: 55%;
				}
			}
		}

		&:not(.open).scroll-hide.header-unpin {
			transform: translateY(calc(-1 * var(--header-height, 6rem)));
		}

		&.sticky {
			position: fixed;

			&.header-active {
				background-color: var(--color-bg-alt, white);
				height: var(--header-scrolled-height, 4rem);
			}
		}

		a.logo-link {
			display: contents;
		}

		.navbar-container {
			width: 100%;
			height: 100%;
			background-color: inherit;

			/* Navbar */
			.navbar {
				display: flex;
				position: relative;
				height: 100%;
				justify-content: space-between;
				align-items: center;
				background-color: inherit;

				/* Toggle menu button */
				.navbar-toggle {
					background-color: transparent;
					cursor: pointer;
					padding: 0;
					border: none;
				}
			}
		}

		.header-logo {
			height: 100%;
			max-width: 50px;
			padding: 0.5rem 0;
		}

		.hamburger {
			position: relative;
			width: 2.2rem;
			padding: 0.1rem;

			.hamburger-item {
				width: 100%;
				height: 0.25rem;
				background-color: var(--color-text-primary, #111827);
				border-radius: 1rem;
				transition: width 500ms ease-in-out;

				&:not(:last-child) {
					margin-bottom: 0.31rem;
				}
			}
		}

		/* Overlay */
		.header-overlay {
			position: fixed;
			inset: 0;
			z-index: -10000;
			background-color: var(--color-text-primary, #111827);
			visibility: hidden;
			opacity: 0;
			transition: all 500ms ease-in-out;
		}
	}

	@media screen and (min-width: 40em) {
		header.header {
			background-color: transparent;
		}
	}

	@media screen and (min-width: 60em) {
		.navbar-toggle {
			display: none;
		}
	}

	/* Menu */
	.navbar-menu {
		list-style: none;
		margin-left: 0;
		padding-left: 0;
	}

	@media screen and (max-width: 60em) {
		.navbar-menu {
			position: fixed;
			top: -100%;
			left: 0;
			z-index: -1;
			width: 100%;
			background-color: var(--color-bg-alt, white);
			text-align: center;
			padding: 2rem 0;
			visibility: hidden;
			transition: all 500ms ease-in-out;
		}

		header.header.open .navbar-menu {
			visibility: visible;
			top: var(--header-scrolled-height, 4rem);
			margin: 0;
		}
	}

	.menu-item:not(:last-child) {
		margin-bottom: 1.5rem;
	}

	@media screen and (min-width: 60em) {
		.menu-item {
			display: inline-block;
			vertical-align: middle;
		}

		.menu-item:not(:last-child) {
			margin: 0 0.6rem;
		}

		header.header {
			&.blur {
				&.header-active {
					background-color: var(--color-bg-alt, rgba(255, 255, 255, 0.4));
					backdrop-filter: blur(10px);
				}
			}
		}
	}

	a.menu-link {
		position: relative;
		padding: 0 0.3rem;
		transition: opacity 300ms ease-in-out;

		&:not(.cta)::before {
			content: "";
			position: absolute;
			left: 0;
			bottom: -0.4rem;
			width: 0;
			height: 0.25rem;
			border-radius: 1rem;
			background-color: var(--color-primary, #a365db);
			transition: width 300ms ease-in-out;
		}

		&:hover {
			opacity: 0.8;

			&::before {
				width: 100%;
			}
		}

		/* Active link */
		&.active {
			font-weight: var(--weight-bolder, 700);

			&::before {
				width: 100%;
			}
		}

		&[aria-current] {
			font-weight: var(--weight-bolder, 700);

			&::before {
				width: 100%;
			}
		}
	}

	@media screen and (max-width: 60em) {
		header.header.open .header-overlay {
			visibility: visible;
			opacity: 0.8;
		}
	}
</style>
