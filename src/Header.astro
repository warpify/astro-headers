---
import { LanguageSwitcher, Translate } from "astro-localization";
import { Image } from "astro-image";
import { ThemeSwitcher } from "astro-theme";
import { Icon } from "astro-icon";

interface NavItem {
	title: string;
	href: string;
}

interface Props {
	navItems: NavItem[];
	pathname: string;
	sticky: boolean;
	blur: boolean;
	hideOnScroll: boolean;
	logo: string;
	showThemeSwitcher: boolean;
	showLanguageSwitcher: boolean;
	hamburgerStyle?: string;
	lmap: Object;
}

const {
	navItems,
	pathname,
	logo,
	lmap = {},
	showThemeSwitcher = true,
	showLanguageSwitcher = true,
	sticky = true,
	blur = true,
	hideOnScroll = true,
	hamburgerStyle = "minimal"
} = Astro.props as Props;

const navItemsLength = navItems.length;
---

<header id="header" class={`${sticky ? "sticky" : ""} ${blur ? "blur" : ""} ${hideOnScroll ? "scroll-hide" : ""} header`}>
	<div class="navbar-wrapper">
		<nav class="navbar container">
			<a class="logo-link" href="/">
				{logo ? <Image class="header-logo" src={logo} /> : <h1>LOGO</h1>}
			</a>

			{hamburgerStyle == "minimal" ? (
				<button
					id="navbar-toggle"
					class="navbar-toggle minimal"
					type="button"
					aria-haspopup="true"
					aria-expanded="false"
					aria-label="Toggle navigation"
				>
					<input class="hamburger-minimal" type="checkbox" />
					<div>
						<span></span>
						<span></span>
					</div>
				</button>
			) : (
				<button id="navbar-toggle" class="navbar-toggle playful">
					<span></span>
					<span></span>
					<span></span>
				</button>
			)}

			<ul id="navbar-menu" class="navbar-menu" role="menu">
				{navItems.map(({ title, href, type, items }) => (
					<li class="menu-item" role="menuitem">
						<span>
							<a {href} aria-current={pathname === href} class="menu-link">
								<Translate {lmap} key={title} />
							</a>
							{items && items.length && (
								<>
								<div class="submenu-toggle" onclick="toggleSubmenu(this)">
									<Icon name="simple-line-icons:arrow-right"/>
								</div>
								</>
							)}
						</span>

						{items && (
							<div class="sub-menu-container">
								<ul class="sub-menu">
									{items.map(({ title, href, type }) => (
										<li class="sub-menu-item" role="menuitem">
											<a {href} aria-current={pathname === href} class="sub-menu-link">
												<Translate {lmap} key={title} />
											</a>
										</li>
									))}
								</ul>
							</div>
						)}
					</li>
				))}
				{showThemeSwitcher && (
					<li class="menu-item" role="menuitem">
						<ThemeSwitcher />
					</li>
				)}
				{showLanguageSwitcher && (
					<li class="menu-item" role="menuitem">
						<LanguageSwitcher />
					</li>
				)}
			</ul>
		</nav>

		<div id="header-overlay" class="header-overlay"></div>
	</div>
</header>

<script>
	let preventMenuLinksFronFoucs;
	var lastKnownScrollY = 0;
	var currentScrollY = 0;
	var ticking = false;

	var header = null;
	var navbarMenu = null;
	var overlay = null;
	var toggleMenuButton = null;

	const classes = {
		pinned: "header-pin",
		unpinned: "header-unpin"
	};

	function onScroll() {
		currentScrollY = window.pageYOffset;
		requestTick();
	}
	function requestTick() {
		if (!ticking) {
			requestAnimationFrame(update);
		}
		ticking = true;
	}
	function pin() {
		if (header.classList.contains(classes.unpinned)) {
			header.classList.remove(classes.unpinned);
			header.classList.add(classes.pinned);
		}
	}
	function unpin() {
		if (header.classList.contains(classes.pinned) || !header.classList.contains(classes.unpinned)) {
			header.classList.remove(classes.pinned);
			header.classList.add(classes.unpinned);
		}
	}
	function update() {
		if (currentScrollY < lastKnownScrollY) {
			pin();
		} else if (currentScrollY > lastKnownScrollY) {
			unpin();
		}
		lastKnownScrollY = currentScrollY;
		ticking = false;
	}
	function openMenu() {
		toggleMenuButton.setAttribute("aria-expanded", "true");
		header.classList.add("open");
		var input = toggleMenuButton.querySelector("input");
		if (input) {
			input.setAttribute("checked", "checked");
			input.checked = true;
		}

		navbarMenu.querySelectorAll("a").forEach((link) => {
			link.setAttribute("tabindex", "0");
		});

		document.addEventListener("keydown", handleKeyDown);

		function handleKeyDown(e) {
			if (e.code == "Tab") {
				menuFocusSystem();
				document.removeEventListener("keydown", handleKeyDown);
			}
		}
	}
	function closeMenu() {
		toggleMenuButton.setAttribute("aria-expanded", "false");
		header.classList.remove("open");
		var input = toggleMenuButton.querySelector("input");
		if (input) {
			input.removeAttribute("checked");
			input.checked = false;
		}

		navbarMenu.querySelectorAll("a").forEach((link) => {
			link.setAttribute("tabindex", "-1");
		});
	}
	function menuFocusSystem() {
		const firstChild = navbarMenu.querySelectorAll("a")[0];
		const lastChild = navbarMenu.querySelectorAll("a")[navbarMenu.childElementCount - 1];

		setTimeout(() => {
			navbarMenu.querySelectorAll("a")[0].focus();
		}, 100);

		navbarMenu.addEventListener("focusin", function (e) {
			if (e.target == lastChild) {
				e.target.addEventListener("focusout", function () {
					toggleMenuButton.focus();
				});
			}
		});
	}
	function toggleSubmenu(subMenuToggle) {
		const submenu = subMenuToggle.parentElement.nextElementSibling;
		const subMenuToggleSvg = subMenuToggle.querySelector("svg");
		if (getComputedStyle(submenu).display == "none") {
			submenu.style.display = "block";
			subMenuToggleSvg.style.transform = "rotate(90deg)";
		} else {
			submenu.style.display = "none";
			subMenuToggleSvg.style.transform = "rotate(0deg)";
		}
	}

	window.addEventListener("load", (event) => {
		header = document.getElementById("header");
		navbarMenu = document.getElementById("navbar-menu");
		overlay = document.getElementById("header-overlay");
		toggleMenuButton = document.getElementById("navbar-toggle");

		window.addEventListener("resize", () => {
			preventMenuLinksFronFoucs();
		});

		toggleMenuButton.addEventListener("click", function () {
			if (toggleMenuButton.getAttribute("aria-expanded") == "false") {
				openMenu();
			} else {
				closeMenu();
			}
		});

		overlay.addEventListener("click", closeMenu);

		window.addEventListener("scroll", function (e) {
			if (this.scrollY > header.offsetHeight) {
				header.classList.add("header-active");
			} else {
				header.classList.remove("header-active");
			}
		});

		document.addEventListener("scroll", onScroll, false);

		(preventMneuLinksFronFoucs = function () {
			if (window.innerWidth < 640) {
				navbarMenu.querySelectorAll("a").forEach((link) => {
					link.setAttribute("tabindex", "-1");
				});
			} else {
				navbarMenu.querySelectorAll("a").forEach((link) => {
					link.setAttribute("tabindex", "0");
				});
			}
		})();
	});
</script>

<style lang="scss">
	/* Header */
	header {
		position: absolute;
		z-index: 100;
		width: 100%;
		height: var(--header-height, 6rem);
		transition: all 300ms ease-in-out;

		&.open {
			background-color: var(--color-bg-alt, white);

			.navbar .navbar-toggle.playful {
				span:nth-of-type(1) {
					transform-origin: bottom;
					transform: rotatez(45deg) translate(8px, 0px);
				}
				span:nth-of-type(2) {
					transform-origin: top;
					transform: rotatez(-45deg);
				}
				span:nth-of-type(3) {
					transform-origin: bottom;
					width: 60%;
					transform: translate(25px, -14px) rotatez(45deg);
				}
			}
		}

		&:not(.open).scroll-hide.header-unpin {
			transform: translateY(calc(-1 * var(--header-height, 6rem)));
		}

		&.sticky {
			position: fixed;

			&.header-active {
				background-color: var(--color-bg-alt, white);
				height: var(--header-scrolled-height, 4rem);
			}
		}

		a.logo-link {
			display: contents;
		}

		.navbar-wrapper {
			width: 100%;
			height: 100%;
			background-color: white;

			/* Navbar */
			.navbar {
				display: flex;
				position: relative;
				height: 100%;
				justify-content: space-between;
				align-items: center;
				background-color: inherit;

				/* Toggle menu button */
				.navbar-toggle.minimal {
					position: relative;
					background-color: transparent;
					cursor: pointer;
					padding: 0;
					border: none;
					width: 50px;
					height: 50px;

					.hamburger-minimal {
						display: block;
						width: 100%;
						height: 100%;
						cursor: pointer;
						z-index: 2;
						-webkit-touch-callout: none;
						position: absolute;
						opacity: 0;
						top: 0;
					}
					div {
						margin: auto;
						position: absolute;
						top: 0;
						right: 0;
						bottom: 0;
						width: 22px;
						height: 12px;
					}
					span {
						position: absolute;
						display: block;
						width: 100%;
						height: 2px;
						background-color: var(--bar-bg, #000);
						border-radius: 1px;
						transition: all 0.2s cubic-bezier(0.1, 0.82, 0.76, 0.965);

						&:first-of-type {
							top: 0;
						}
						&:last-of-type {
							bottom: 0;
						}
					}
					&.active,
					.hamburger-minimal:checked + div {
						span {
							&:first-of-type {
								transform: rotate(45deg);
								top: 5px;
							}
							&:last-of-type {
								transform: rotate(-45deg);
								bottom: 5px;
							}
						}
					}

					&.active:hover span:first-of-type,
					&.active:hover span:last-of-type,
					&:hover .hamburger-minimal:checked + div span:first-of-type,
					&:hover .hamburger-minimal:checked + div span:last-of-type {
						width: 22px;
					}

					&:hover {
						// no need hover effect on mobile.
						@media (hover: hover) {
							span:first-of-type {
								width: 26px;
							}

							span:last-of-type {
								width: 12px;
							}
						}
					}
				}

				.navbar-toggle.playful {
					display: flex;
					flex-direction: column;
					width: 70px;
					cursor: pointer;
					background: transparent;
					border: none;
					transform: scale(0.6);

					span {
						background: #000;
						border-radius: 10px;
						height: 7px;
						margin: 7px 0;
						transition: 0.4s cubic-bezier(0.68, -0.6, 0.32, 1.6);
					}
					span:nth-of-type(1) {
						width: 50%;
					}
					span:nth-of-type(2) {
						width: 100%;
					}
					span:nth-of-type(3) {
						width: 75%;
					}
				}
			}
		}

		.header-logo {
			height: 100%;
			max-width: 50px;
			padding: 0.5rem 0;
			object-fit: contain;
		}

		.hamburger {
			position: relative;
			width: 2.2rem;
			padding: 0.1rem;

			.hamburger-item {
				width: 100%;
				height: 0.25rem;
				background-color: var(--color-text-primary, #111827);
				border-radius: 1rem;
				transition: width 500ms ease-in-out;

				&:not(:last-child) {
					margin-bottom: 0.31rem;
				}
			}
		}

		/* Overlay */
		.header-overlay {
			position: fixed;
			inset: 0;
			z-index: -10000;
			background-color: var(--color-text-primary, #111827);
			visibility: hidden;
			opacity: 0;
			transition: all 500ms ease-in-out;
		}
	}

	@media screen and (hover: hover) and (min-width: 60em) {
		header.header {
			background-color: transparent;
		}
	}

	@media screen and (hover: hover) and (min-width: 60em) {
		.navbar-toggle {
			display: none;
		}
	}

	/* Menu */
	.navbar-menu {
		list-style: none;
		margin-left: 0;
		padding-left: 0;

		.sub-menu-container {
			display: none;
			position: absolute;
			padding-top: 1rem;
		}

		.sub-menu {
			list-style: none;
			margin-left: 0;
			padding: 1rem 1.5rem;
			background: #fff;
			border-radius: 0.8rem;
			box-shadow: 0px 0px 10px 0px hsl(0deg 0% 0% / 10%);
			white-space: nowrap;
		}
	}

	@media screen and (hover: none), (max-width: 60em) {
		.navbar-menu {
			position: fixed;
			overflow: auto;
			max-height: calc(90vh - 6rem);
			top: -100%;
			left: 0;
			z-index: -1;
			width: 100%;
			background-color: var(--color-bg-alt, white);
			text-align: center;
			padding: 2rem 0;
			visibility: hidden;
			transition: all 500ms ease-in-out;

			.sub-menu-container {
				position: relative;
			}
		}

		header.header.open .navbar-menu {
			visibility: visible;
			top: var(--header-scrolled-height, 4rem);
			margin: 0;
		}
	}

	.submenu-toggle {
		display: inline-block;
		width: 0.4rem;
		margin-left: 0.6rem;
		color: black;

		svg {
			transition: 0.2s;
		}
	}

	.menu-item {
		position: relative;
	}

	@media screen and (hover: hover) and (min-width: 60em) {
		.menu-item:hover .sub-menu-container {
			display: block;
		}
	}

	.menu-item:not(:last-child),
	.sub-menu-item:not(:last-child) {
		margin-bottom: 0.2rem;
	}

	@media screen and (hover: hover) and (min-width: 60em) {
		.submenu-toggle {
			display: none;
		}
		.menu-item {
			display: inline-block;
			vertical-align: middle;
		}
		.menu-item:not(:last-child) {
			margin: 0 0.6rem;
		}
		header.header {
			&.blur {
				&.header-active {
					background-color: var(--color-bg-alt, rgba(255, 255, 255, 0.4));
					backdrop-filter: blur(10px);
				}
			}
		}
	}

	@media screen and (hover: none), (max-width: 60em) {
		header.header.open .header-overlay {
			visibility: visible;
			opacity: 0.5;
			backdrop-filter: blur(10px);
		}
	}
</style>
